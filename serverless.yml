service: slowcovid
app: slowcovid
org: jeffreysilver

provider:
  name: aws
  profile: eslworks
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - kinesis:*
        - rds-data:ExecuteStatement
        - secretsmanager:GetSecretValue
      Resource: "*"
  vpc:
    subnetIds:
      - subnet-07fb30e724091f148
      - subnet-0534a0b05872cac2b

  environment:
    AUTH_USERNAME: ${env:AUTH_USERNAME}
    AUTH_PASSWORD: ${env:AUTH_PASSWORD}
    
plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin

functions:
  registration:
    handler: registration.handle_registration
    events:
      - http:
          path: registration
          method: post
          cors: true

  storeInboundSMS:
    handler: inbound_sms.store_inbound_sms

  healthcheck:
    handler: healthcheck.healthcheck
    events:
      - http:
          path: /healthcheck
          method: get
          cors: true


resources:
  Resources:
    AWSLambdaVPCAccessExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Creating policy for vpc and lambda.
        Roles:
          - { "Ref": "IamRoleLambdaExecution" }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"

    InboundSMSStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: inbound-sms-${self:provider.stage}
        ShardCount: 4

    StoreInboundSMSEvent:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        BatchSize: 3
        MaximumBatchingWindowInSeconds: 1
        MaximumRetryAttempts: 5
        EventSourceArn:
          Fn::GetAtt:
            - InboundSMSStream
            - Arn
        FunctionName:
          Fn::GetAtt:
            - StoreInboundSMSLambdaFunction
            - Arn
        StartingPosition: LATEST

    AuroraCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-postgresql
        EngineMode: serverless
        BackupRetentionPeriod: 7
        DatabaseName: postgres
        DBClusterIdentifier: ${self:provider.stage}
        DeletionProtection: true
        EnableHttpEndpoint: true
        EngineVersion: 10.7
        MasterUsername: postgres
        MasterUserPassword: ${env:DB_PASSWORD}
        StorageEncrypted: true
        ScalingConfiguration:
            AutoPause: true
            MaxCapacity: 4
            MinCapacity: 2
            SecondsUntilAutoPause: 300
