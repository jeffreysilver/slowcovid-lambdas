service: slowcovid
app: slowcovid
org: jeffreysilver

custom:
  enterprise:
    collectLambdaLogs: false
  logForwarding:
      destinationARN: arn:aws:lambda:us-east-1:696991354966:function:datadog-forwarder-Forwarder-1VDUH0V5RXYDW
  pythonRequirements:
    slim: true
    slimPatterns:
      - __tests__/**
      - .github/**
      - db_local/**
      - sample_events/**
      - env/***
      - node_modules/**

provider:
  name: aws
  profile: eslworks
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - kinesis:*
        - sqs:*
        - dynamodb:*
        - rds-data:*
        - secretsmanager:GetSecretValue
      Resource: "*"
  vpc:
    subnetIds:
      - subnet-07fb30e724091f148
      - subnet-0534a0b05872cac2b

  environment:
    STAGE: ${self:provider.stage}
        
plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-log-forwarding

functions:
  registration:
    handler: stopcovid/registration.handle_registration
    events:
      - http:
          path: registration
          method: post
          cors: true

  twilioWebhook:
    handler: aws_lambdas/twilio_webhook.handler
    events:
      - http:
          path: webhooks/twilio
          method: post

  sendMessage:
    handler: aws_lambdas/send_sms_batch.handler
    timeout: 60
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - OutboundSMSFifoQueue
              - Arn
          # punt on idempotently sending messages to Twilio
          batchSize: 1

  handleCommand:
    handler: aws_lambdas/handle_command.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - CommandStream
              - Arn
          startingPosition: LATEST
          maximumRetryAttempts: 5
          destinations:
            onFailure:
              Fn::GetAtt:
                - CommandFailureQueue
                - Arn
    environment:
      DIALOG_TABLE_NAME_SUFFIX: ${self:provider.stage}
      REGISTRATION_VALIDATION_URL: https://eslworks-api-production.herokuapp.com/slowcovid/lookup
      REGISTRATION_VALIDATION_KEY: ${env:REGISTRATION_VALIDATION_KEY}


  logMessage:
    handler: aws_lambdas/log_message.handle
    timeout: 60  # Give aurora cluster time to cold start

  distributeDialogEvents:
    handler: aws_lambdas/enqueue_sms_batch.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - DialogEventBatches
              - StreamArn
          startingPosition: LATEST

  updateDrillStatus:
    handler: aws_lambdas/update_drill_status.handler
    timeout: 60
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - DialogEventBatches
              - StreamArn
          startingPosition: LATEST

  scheduleNextDrillsToTrigger:
    handler: aws_lambdas/schedule_next_drills_to_trigger.handler
    timeout: 60
    events:
      - schedule: cron(5 17 * * ? *)

  triggerScheduledDrill:
    handler: aws_lambdas/trigger_scheduled_drill.handler
    timeout: 60
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DrillInitiationQueue
              - Arn

  triggerReminders:
    handler: aws_lambdas/trigger_reminders.handler
    timeout: 60
    events:
      - schedule: cron(0/5 14-23 * * ? *)

resources:
  Resources:
    AWSLambdaVPCAccessExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Creating policy for vpc and lambda.
        Roles:
          - { "Ref": "IamRoleLambdaExecution" }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"

    # COMMAND STREAM
    CommandStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: command-stream-${self:provider.stage}
        ShardCount: 2

    # MESSAGE LOG STREAM
    MessageLogStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: message-log-${self:provider.stage}
        ShardCount: 2

    WriteMessageEvent:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        EventSourceArn:
          Fn::GetAtt:
            - MessageLogStream
            - Arn
        FunctionName:
          Fn::GetAtt:
            - LogMessageLambdaFunction
            - Arn
        StartingPosition: LATEST
        MaximumRetryAttempts: 10000

    # DB CLUSTER
    AuroraCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-postgresql
        EngineMode: serverless
        BackupRetentionPeriod: 7
        DatabaseName: postgres
        DBClusterIdentifier: ${self:provider.stage}
        DeletionProtection: true
        EnableHttpEndpoint: true
        EngineVersion: 10.7
        MasterUsername: postgres
        MasterUserPassword: ${env:DB_PASSWORD}
        StorageEncrypted: true
        ScalingConfiguration:
            AutoPause: false
            MaxCapacity: 4
            MinCapacity: 2

    # OUTBOUND SMS
    OutboundSMSFifoQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: outbound-sms-${self:provider.stage}.fifo
        FifoQueue: true
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
            - OutboundSMSDeadLetterFifoQueue
            - Arn
          maxReceiveCount: 3

    OutboundSMSDeadLetterFifoQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: outbound-sms-dlq-${self:provider.stage}.fifo

    # SYSTEM TEST
    SystemTestQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: system-test-${self:provider.stage}
        MessageRetentionPeriod: 60
  
    # DIALOG STATE AND EVENTS (DynamoDB)
    DialogState:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dialog-state-${self:provider.stage}
        KeySchema:
          - AttributeName: phone_number
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: phone_number
            AttributeType: S
        BillingMode: PAY_PER_REQUEST

    DialogEventBatches:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dialog-event-batches-${self:provider.stage}
        KeySchema:
          - AttributeName: phone_number
            KeyType: HASH
          - AttributeName: batch_id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: phone_number
            AttributeType: S
          - AttributeName: batch_id
            AttributeType: S
          - AttributeName: created_time
            AttributeType: S
        LocalSecondaryIndexes:
          - IndexName: by_created_time
            KeySchema:
              - AttributeName: phone_number
                KeyType: HASH
              - AttributeName: created_time
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        BillingMode: PAY_PER_REQUEST

    # DRILL INITIATION
    DrillInitiations:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: drill-initiations-${self:provider.stage}
        KeySchema:
          - AttributeName: phone_number
            KeyType: HASH
          - AttributeName: idempotency_key
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: phone_number
            AttributeType: S
          - AttributeName: idempotency_key
            AttributeType: S
        TimeToLiveSpecification:
          AttributeName: expiration_ts
          Enabled: true
        BillingMode: PAY_PER_REQUEST

    # TWILIO WEBHOOK IDEMPOTENCY
    TwilioWebhooks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: twilio-webhooks-${self:provider.stage}
        KeySchema:
          - AttributeName: idempotency_key
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: idempotency_key
            AttributeType: S
        TimeToLiveSpecification:
          AttributeName: expiration_ts
          Enabled: true
        BillingMode: PAY_PER_REQUEST

    # OUTBOUND SMS
    DrillInitiationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: drill-initiation-${self:provider.stage}
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
            - DrillInitiationDeadLetterQueue
            - Arn
          maxReceiveCount: 3

    DrillInitiationDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: drill-initiation-dlq-${self:provider.stage}

    # Command failures
    CommandFailureQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: command-failures-${self:provider.stage}
